#!/usr/bin/env python
# -*- coding: us-ascii -*-
# vim: syntax=python
#
# Copyright 2006-2009 Noriyuki Hosaka bgnori@gmail.com
#

__all__ = ['Validator']
import sha

from tonic.lineparser import LineParser

DEBUG = True
class LineValidator(LineParser):
  _first = (
  r"""(?P<emptyline>^ *$)"""
  r'|'
  r"""(?P<mathclength>(^ \d+ point match))"""
  r'|'
  r"""(?P<gameheader>(^ *Game \d+))"""
  r'|'
  r"""(?P<playerheader>(^ """
    r"""(?P<player1>[^,:]+(,\d+)? : \d+)"""
    r""" *"""
    r"""(?P<player2>[^,:]+(,\d+)? : \d+)"""
    r""")"""
  r""")"""
  r'|'
  r"""(?P<moves>^"""
    r"""(?P<nthmove> *\d+\)"""
    r""" +"""
    r"""(?P<player1_action>"""
      r"""(?P<rolled1>[1-6][1-6]:(?P<move1>( [0-9]{1,2}/[0-9]{1,2}\*?])*))"""
      r'|'
      r"""(?P<action1> (Takes)|(Doubles => \d+)|(Drops))"""
      r""")?"""
    r""" *"""
    r"""(?P<player2_action>"""
      r"""(?P<rolled2>[1-6][1-6]:(?P<move2>( [0-9]{1,2}/[0-9]{1,2}\*?])*))"""
      r'|'
      r"""(?P<action2> (Takes)|(Doubles => \d+)|(Drops))"""
    r""")?"""
  r""")"""
  r'|'
  r"""(?P<results>^ *Wins \d+ points?)"""
  r""")"""
  )
  _last = r"""(?P<baddata>^.*)"""

  def handle_emptyline(self, match, matchobj):
    if DEBUG:
      print match
  def handle_mathclength(self, match, matchobj):
    if DEBUG:
      print match
  def handle_gameheader(self, match, matchobj):
    if DEBUG:
      print match
  def handle_playerheader(self, match, matchobj):
    if DEBUG:
      print match
  def handle_moves(self, match, matchobj):
    if DEBUG:
      print match
  def handle_baddata(self, match, matchobj):
    if True:
      print matchobj
      print match
    raise ValueError(match)


class Validator(object):
  def __init__(self):
    self.h = sha.new()
    self.linev = LineValidator()

  def feed(self, line):
    self.h.update(line)
    self.linev.parse(line)

  def done(self):
    return self.h


if __name__ == '__main__':
  header = '''\
#!/usr/bin/env python
# -*- coding: us-ascii -*-
# vim: syntax=python
#
# Copyright 2006-2009 Noriyuki Hosaka bgnori@gmail.com
#


#WARNING!
#DO NOT EDIT THIS FILE.
#THIS FILE IS AUTO GENERATED.

import random
import StringIO

import unittest
from bglib.record.snowietxt import Validator

def mutated(s, f):
  random.seed(s)
  lines = f.readlines()
  random.shuffle(lines)
  return StringIO.StringIO(''.join(lines))


class SnowietxtTest(unittest.TestCase):
  def setUp(self):
    self.v = Validator()
'''
  vanilla = '''\
  def test_vanilla_%s(self):
    f = open('%s')
    try:
      for line in f:
        self.v.feed(line)
    finally:
      f.close()
    h = self.v.done()
    self.assertEqual(h.hexdigest(),
                     '%s')
'''
  mutated = '''\
  def test_mutated_%s(self):
    f = open('%s')
    m = mutated('%s', f)
    f.close()
    try:
      try:
        for line in m:
          self.v.feed(line)
        self.assert_(False)
      except ValueError:
        pass
    finally:
      m.close()
'''

  import sys
  import tempfile
  from subprocess import call

  f = tempfile.TemporaryFile()
  try:
    call('sha1sum bglib/record/snowietxt/*.txt', shell=True, stdout=f)
    f.seek(0)
    xs = [line.split() for line in f.readlines()]
  finally:
    f.close()

  print header 
  for i, x in enumerate(xs):
    print vanilla%(i, x[1], x[0])

  for i, x in enumerate(xs):
    print mutated%(i, x[1], x[0])



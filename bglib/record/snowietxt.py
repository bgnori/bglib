#!/usr/bin/env python
# -*- coding: us-ascii -*-
# vim: syntax=python
#
# Copyright 2006-2009 Noriyuki Hosaka bgnori@gmail.com
#

__all__ = ['Validator']
import sha

from tonic.lineparser import LineParser

class LineValidator(LineParser):
  _first = (
  r"""(?P<mathclength>(^ \d+ point match))"""
  r'|'
  r"""(?P<gameheader>(^ Game \d+))"""
  r'|'
  r"""(?P<playerheader>(^ """
    r"""(?P<player1>[^,]+,\d+ : \d+)"""
    r""" *"""
    r"""(?P<player2>[^,]+,\d+ : \d+)"""
    r"""))"""
  r'|'
  r"""(?P<moves>(^ """
    r"""(?P<movecount> *\d+\)"""
    r""" """
    r"""(?P<player1_action>"""
      r"""(?P<rolled1>[1-6][1-6]: +(?P<move1>([1-9]+)/([0-9]+))*)"""
      r"""(?P<action1> (Takes)|(Doubles => \d+)|(Drops))"""
      r""")"""
    r""" *"""
    r"""(?P<player2_action>[^,]+,\d+ : \d+)"""
      r"""(?P<rolled2>[1-6][1-6]: +(?P<move2>([1-9]+)/([0-9]+))*)"""
      r"""(?P<action2> (Takes)|(Doubles => \d+)|(Drops))"""
    r"""))"""
  r'|'
  r"""(?P<results>^ *Wins \d+ points)"""
  r""")"""
  )
  _last = r"""(<?P<baddata>.*)"""
  def handle_mathclength(self, match, matchobj):pass
  def handle_gameheader(self, match, matchobj):pass
  def handle_playerheader(self, match, matchobj):pass
  def handle_moves(self, match, matchobj):pass
  def handle_baddata(self, match, matchobj):
    raise ValueError(match)


class Validator(object):
  def __init__(self, f):
    self.h = sha.new()
    self.f = f

  def validate(self):
    for line in self.f:
      self.h.update(line)

    return self.h


if __name__ == '__main__':
  header = '''\
#!/usr/bin/env python
# -*- coding: us-ascii -*-
# vim: syntax=python
#
# Copyright 2006-2009 Noriyuki Hosaka bgnori@gmail.com
#


#WARNING!
#DO NOT EDIT THIS FILE.
#THIS FILE IS AUTO GENERATED.

import unittest
from bglib.record.snowietxt import Validator

class SnowietxtTest(unittest.TestCase):
'''
  t = '''\
  def test_%s(self):
    f = open('%s')
    v = Validator(f)
    h = v.validate()
    self.assertEqual(h.hexdigest(),
                     '%s')
'''

  import sys
  import tempfile
  from subprocess import call, PIPE

  f = tempfile.TemporaryFile()
  try:
    call('sha1sum bglib/record/testdata/*.txt', shell=True, stdout=f)
    f.seek(0)
    xs = [line.split() for line in f.readlines()]
  finally:
    f.close()

  print header 
  for i, x in enumerate(xs):
    print t%(i, x[1], x[0])


